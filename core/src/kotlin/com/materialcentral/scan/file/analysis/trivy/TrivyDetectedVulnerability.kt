package com.materialcentral.scan.file.analysis.trivy

import com.beust.klaxon.JsonObject
import com.materialcentral.scan.FindingSeverity
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.text.SimpleDateFormat

/**
 * https://github.com/aquasecurity/trivy/blob/main/pkg/types/vulnerability.go#L9
 */
class TrivyDetectedVulnerability(
    val id: String,
    val vendorIds: List<String>,
    val severity: FindingSeverity,
    val packageName: String?,
    val packagePath: String?,
    val installedVersion: String?,
    val fixedVersion: String?,
    val layer: TrivyLayer?,
    val primaryUrl: String?,
    val title: String?,
    val description: String?,
    val cweIds: List<String>,
    val cvss: List<TrivyCvss>,
    val references: List<String>,
    val publishedAt: Long?,
    val lastModifiedAt: Long?,
    val source: String?,
    val dataSource: TrivyDataSource?
) {

    lateinit var result: TrivyResult

    val severitySource: String? by lazy {
        if (source.isNullOrBlank()) {
            dataSource?.id
        } else if (dataSource == null) {
            source
        } else if (source.equals(dataSource.id, true)) {
            source
        } else {
            "$source (${dataSource.id})"
        }
    }

    companion object {
        const val TimestampFormat = "yyyy-MM-dd'T'HH:mm:ss'Z'"

        private val log: Logger = LoggerFactory.getLogger(javaClass)

        fun map(json: JsonObject?): TrivyDetectedVulnerability? {
            if (json == null) {
                return null
            }

            val id = json.string("VulnerabilityID")
            if (id.isNullOrBlank()) {
                log.warn("Trivy vulnerability has no VulnerabilityID property in ${json.toJsonString()}")
                return null
            }

            val vendorIds = json.array<String>("VendorIDs") ?: listOf()

            val packageName = json.string("PkgName")
            if (packageName.isNullOrBlank()) {
                log.warn("Trivy vulnerability has no PkgName property in ${json.toJsonString()}")
                return null
            }

            val packagePath = json.string("PkgPath")

            val severity = trivySeverity(json.string("Severity"))
            if (severity == null) {
                log.warn("Trivy vulnerability has no Severity property in: ${json.toJsonString()}")
                return null
            }


            val installedVersion = json.string("InstalledVersion")
            val fixedVersion = json.string("FixedVersion")
            val layer = TrivyLayer.map(json.obj("Layer"))
            val severitySource = json.string("SeveritySource")
            val primaryUrl = json.string("PrimaryURL")
            val title = json.string("Title")
            val description = json.string("Description")
            val cweIds = json.array<String>("CweIDs")?.toList() ?: listOf()
            val cvss = TrivyCvss.parse(json.obj("CVSS"))
            val references = json.array<String>("References")?.toList() ?: listOf()

            val publishedDate = json.string("PublishedDate")
            val publishedAt = if (publishedDate.isNullOrBlank()) {
                null
            } else {
                try {
                    SimpleDateFormat(TimestampFormat).parse(publishedDate).time
                } catch (e: Exception) {
                    log.warn("Unable parse trivy vulnerability PublishedDate $publishedDate")
                    null
                }
            }

            val lastModifiedDate = json.string("LastModifiedDate")
            val lastModifiedAt = if (lastModifiedDate.isNullOrBlank()) {
                null
            } else {
                try {
                    SimpleDateFormat(TimestampFormat).parse(lastModifiedDate).time
                } catch (e: Exception) {
                    log.warn("Unable parse trivy vulnerability LastModifiedDate $lastModifiedDate")
                    null
                }
            }

            val dataSource = TrivyDataSource.parse(json.obj("DataSource"))

            return TrivyDetectedVulnerability(id, vendorIds, severity, packageName, packagePath, installedVersion, fixedVersion, layer, primaryUrl, title,
                description, cweIds, cvss, references, publishedAt, lastModifiedAt, severitySource, dataSource)
        }

    }
}
            