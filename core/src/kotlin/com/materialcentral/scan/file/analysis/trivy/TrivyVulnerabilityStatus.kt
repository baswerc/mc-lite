package com.materialcentral.scan.file.analysis.trivy

import org.geezer.HasDescription
import org.geezer.db.ReadableDataEnum
import org.geezer.db.ReadableDataEnumType

enum class TrivyVulnerabilityStatus(override val id: Int, override val readableId: String, override val label: String, val command: String, val unfixed: Boolean, override val description: String?) : ReadableDataEnum, HasDescription {
    UNKNOWN(0, "unknown", "Unknown", "unknown", false, "The status of vulnerability is unknown"),
    NOT_AFFECTED(1, "not-affected", "Not Affected", "not_affected", false, "This package is not affected by this vulnerability on this platform."),
    AFFECTED(2, "affected", "Affected", "affected", true, "This package is affected by this vulnerability on this platform, but there is no patch released yet."),
    FIXED(3, "fixed", "Fixed", "fixed", false, "This vulnerability is fixed on this platform."),
    UNDER_INVESTIGATION(4, "under-investigation", "Under Investigation", "under_investigation", false, "It is currently unknown whether or not this vulnerability affects this package on this platform, and it is under investigation."),
    WILL_NOT_FIX(5, "will-not-fix", "Will Not Fix", "will_not_fix", true, "This package is affected by this vulnerability on this platform, but there is currently no intention to fix it (this would primarily be for flaws that are of Low or Moderate impact that pose no significant risk to customers)."),
    FIX_DEFERRED(6, "fix-deferred", "Fix Deferred", "fix_deferred", true, "This package is affected by this vulnerability on this platform, and may be fixed in the future."),
    END_OF_LIFE(7, "end-of-life", "End Of Life", "end_of_life", true, "This package has been identified to contain the impacted component, but analysis to determine whether it is affected or not by this vulnerability was not performed.");

    companion object : ReadableDataEnumType<TrivyVulnerabilityStatus> {
        override val enumValues: Array<TrivyVulnerabilityStatus> = enumValues()

        @JvmField
        val unfixedStatuses = enumValues.filter { it.unfixed }

    }
}