package com.materialcentral.scan.ui

import com.materialcentral.DataStringsTable
import org.geezer.db.schema.ilike
import org.geezer.io.ui.FontIcon
import org.geezer.io.ui.UI
import org.geezer.io.ui.table.UiColumn
import com.materialcentral.oss.OssPackage
import com.materialcentral.oss.OssPackageReleasesTable
import com.materialcentral.oss.OssPackagesTable
import com.materialcentral.scan.file.KnownVulnerabilityScanFindingsTable
import com.materialcentral.scan.filter.ScanFindingFilter
import com.materialcentral.vulnerability.KnownVulnerabilitiesTable
import com.materialcentral.vulnerability.ui.KnownVulnerabilityUiTable
import jakarta.servlet.http.HttpServletRequest
import kotlinx.html.div
import kotlinx.html.i
import kotlinx.html.span
import org.geezer.db.schema.any
import org.geezer.routes.RequestParameters
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq

class KnownVulnerabilityScanFindingsUiTable(val scanId: Long) : KnownVulnerabilityUiTable(KnownVulnerabilityScanFindingsTable.id) {

    override fun initializeColumns(columns: MutableList<UiColumn>) {

        addIdentifierColumn(columns)
        
        columns.add(UiColumn("Package", icon = OssPackage.Icon, tableColumns = listOf(OssPackagesTable.name, OssPackageReleasesTable.version) ) { html, row, request, rowCache ->
            val packageType = row[OssPackagesTable.type]
            html.div {
                html.i(packageType.icon.getCssClass())
                +" ${row[OssPackagesTable.name]}@${row[OssPackageReleasesTable.version]}"
            }
        })

        columns.add(UiColumn("Filtered", icon = ScanFindingFilter.Icon, tableColumn = KnownVulnerabilityScanFindingsTable.findingFilterId) { html, row, request, _ ->
            html.span {
                +(UI.formatBoolean(row[KnownVulnerabilityScanFindingsTable.findingFilterId] != null))
            }
        })
        
        addAverageCvssColumn(columns)

        addEpssColumn(columns)

        if (KnownVulnerabilityScanFindingsTable.any {(KnownVulnerabilityScanFindingsTable.scanId eq scanId) and (KnownVulnerabilityScanFindingsTable.inheritedFinding eq true) }) {
            columns.add(UiColumn("Inherited", icon = FontIcon.Description, tableColumn = KnownVulnerabilitiesTable.title) { html, row, _, _ ->
                html.text(UI.formatBoolean(row[KnownVulnerabilityScanFindingsTable.inheritedFinding]))
            })
        }
    }

    override fun createQuery(request: HttpServletRequest, parameters: RequestParameters, searchQuery: String?): Query {
        var where: Op<Boolean> = KnownVulnerabilityScanFindingsTable.scanId eq scanId

        if (!searchQuery.isNullOrBlank()) {
            where = where and ((KnownVulnerabilitiesTable.title ilike searchQuery) or (KnownVulnerabilitiesTable.description ilike searchQuery) or (DataStringsTable.value ilike searchQuery))
        }

        where = addVulnerabilityFilters(where, parameters)


        return KnownVulnerabilityScanFindingsTable.innerJoin(KnownVulnerabilitiesTable, { knownVulnerabilityId }, { id }).innerJoin(OssPackageReleasesTable, { KnownVulnerabilityScanFindingsTable.ossPackageReleaseId }, { id })
            .innerJoin(OssPackagesTable, { OssPackageReleasesTable.ossPackageId }, { id }).leftJoin(DataStringsTable, {KnownVulnerabilityScanFindingsTable.filePathId}, { id }).select(where)
    }
}