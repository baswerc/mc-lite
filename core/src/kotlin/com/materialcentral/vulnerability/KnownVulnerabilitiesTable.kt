package com.materialcentral.vulnerability

import org.geezer.db.FilteredUpdateStatement
import com.materialcentral.db.schema.*
import com.materialcentral.oss.OssPackagesTable
import com.materialcentral.vulnerability.cvss.CvssScoresTable
import com.materialcentral.vulnerability.cvss.CvssSeverity
import com.materialcentral.vulnerability.db.KnownVulnerabilityDB
import org.geezer.db.schema.DataTable
import org.geezer.db.schema.eqIgnoreCase
import org.geezer.db.schema.list
import org.geezer.db.schema.referencesWithStandardNameAndIndex
import org.jetbrains.exposed.sql.ReferenceOption
import org.jetbrains.exposed.sql.ResultRow
import org.jetbrains.exposed.sql.innerJoin
import org.jetbrains.exposed.sql.select

object KnownVulnerabilitiesTable : DataTable<KnownVulnerability>("known_vulnerabilities") {
    @JvmField
    val primaryIdentifier = varchar("primary_identifier", KnownVulnerabilityIdentifiersTable.IdentifierLength).uniqueIndex("vulnerabilities_primary_identifier_uq")

    @JvmField
    val title = varchar("title", 1000).nullable()

    @JvmField
    val description = text("description").nullable()

    @JvmField
    val primaryUrl = url("primary_url").nullable()

    val publishedAt = long("published_at").nullable()

    val lastModifiedAt = long("last_modified_at").nullable()

    val ossPackageId = long("oss_package_id").referencesWithStandardNameAndIndex(OssPackagesTable.id, ReferenceOption.SET_NULL).nullable()

    val affectedOssPackageVersions = varchar("affected_oss_package_versions", 500).nullable()

    val fixedOssPackageVersions = varchar("fixed_oss_package_versions", 500).nullable()

    val dbs = list("db_ids", KnownVulnerabilityDB)

    val preferredCvssV3ScoreId = long("preferred_cvss_v3_score_id").referencesWithStandardNameAndIndex(CvssScoresTable.id, ReferenceOption.SET_NULL).nullable()

    val averageCvssV3Score = double("average_cvss_v3_score").nullable()

    // Best score is preferred if available else average
    val bestCvssV3Score = double("best_cvss_v3_score").nullable()

    @JvmField
    val epssScore = double("epss_score").nullable()

    @JvmField
    val epssPercentile = double("epss_percentile").nullable()

    val inKEV = bool("in_kev").nullable()

    val lastSynchronizedAt = long("last_synchronized_at").nullable()

    fun find(primaryIdentifier: String): KnownVulnerability? {
        return selectSingleObjectOrNull { KnownVulnerabilitiesTable.primaryIdentifier eq primaryIdentifier }
    }

    fun apply(targetVulnerability: KnownVulnerability, sourceVulnerability: KnownVulnerability) {
        targetVulnerability.linkToDB(sourceVulnerability.id)
        targetVulnerability.primaryIdentifier = sourceVulnerability.primaryIdentifier
        targetVulnerability.title = sourceVulnerability.title
        targetVulnerability.description = sourceVulnerability.description
        targetVulnerability.publishedAt = sourceVulnerability.publishedAt
        targetVulnerability.lastModifiedAt = sourceVulnerability.lastModifiedAt
        targetVulnerability.ossPackageId = sourceVulnerability.ossPackageId
        targetVulnerability.affectedOssPackageVersions = sourceVulnerability.affectedOssPackageVersions
        targetVulnerability.fixedOssPackageVersions = sourceVulnerability.fixedOssPackageVersions
        targetVulnerability.primaryIdentifier = sourceVulnerability.primaryIdentifier
        targetVulnerability.dbs = sourceVulnerability.dbs
        targetVulnerability.preferredCvssV3ScoreId = sourceVulnerability.preferredCvssV3ScoreId
        targetVulnerability.averageCvssV3Score = sourceVulnerability.averageCvssV3Score
        targetVulnerability.bestCvssV3Score = sourceVulnerability.bestCvssV3Score
        targetVulnerability.epssScore = sourceVulnerability.epssScore
        targetVulnerability.epssPercentile = sourceVulnerability.epssPercentile
        targetVulnerability.inKEV = sourceVulnerability.inKEV
        targetVulnerability.lastSynchronizedAt = sourceVulnerability.lastSynchronizedAt
    }

    fun findOrCreate(identifier: String): KnownVulnerability {
        val find = {
            KnownVulnerabilityIdentifiersTable.innerJoin(KnownVulnerabilitiesTable, { knownVulnerabilityId }, { id })
                .select { KnownVulnerabilityIdentifiersTable.identifier eqIgnoreCase identifier }.singleOrNull()?.let(KnownVulnerabilitiesTable::constructData) ?:
                KnownVulnerabilitiesTable.selectSingleObjectOrNull { KnownVulnerabilitiesTable.primaryIdentifier eqIgnoreCase identifier }
        }

        return find() ?: run {
            try {
                val kv = KnownVulnerabilitiesTable.create(KnownVulnerability(identifier))
                KnownVulnerabilityIdentifiersTable.create(KnownVulnerabilityIdentifier(kv.id, identifier))
                kv
            } catch (e: Exception) {
                find() ?: throw e
            }
        }
    }

    override fun mapDataToStatement(data: KnownVulnerability, statement: FilteredUpdateStatement, insert: Boolean) {
        statement[primaryIdentifier] = data.primaryIdentifier
        statement[title] = data.title
        statement[description] = data.description
        statement[primaryUrl] = data.primaryUrl
        statement[publishedAt] = data.publishedAt
        statement[lastModifiedAt] = data.lastModifiedAt
        statement[ossPackageId] = data.ossPackageId
        statement[affectedOssPackageVersions] = data.affectedOssPackageVersions
        statement[fixedOssPackageVersions] = data.fixedOssPackageVersions
        statement[dbs] = data.dbs
        statement[preferredCvssV3ScoreId] = data.preferredCvssV3ScoreId
        statement[averageCvssV3Score] = data.averageCvssV3Score
        statement[bestCvssV3Score] = data.bestCvssV3Score
        statement[epssScore] = data.epssScore
        statement[epssPercentile] = data.epssPercentile
        statement[inKEV] = data.inKEV
        statement[lastSynchronizedAt] = data.lastSynchronizedAt
    }

    override fun constructData(row: ResultRow): KnownVulnerability {
        return KnownVulnerability(
                row[primaryIdentifier],
                row[title],
                row[description],
                row[primaryUrl],
                row[publishedAt],
                row[lastModifiedAt],
                row[ossPackageId],
                row[affectedOssPackageVersions],
                row[fixedOssPackageVersions],
                row[dbs],
                row[preferredCvssV3ScoreId],
                row[averageCvssV3Score],
                row[bestCvssV3Score],
                row[epssScore],
                row[epssPercentile],
                row[inKEV],
                row[lastSynchronizedAt]
        )
    }
}