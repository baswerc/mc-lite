package com.materialcentral.vulnerability.ui

import org.geezer.io.ui.table.UiColumn
import org.geezer.io.ui.table.UiTable
import com.materialcentral.vulnerability.KnownVulnerabilitiesTable
import com.materialcentral.vulnerability.KnownVulnerability
import com.materialcentral.vulnerability.cvss.CvssScore
import com.materialcentral.vulnerability.cvss.CvssSeverity
import com.materialcentral.vulnerability.cvss.CvssVersion
import kotlinx.html.*
import org.geezer.routes.RequestParameters
import org.geezer.routes.urls.UrlGen
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.SqlExpressionBuilder.greaterEq
import org.jetbrains.exposed.sql.SqlExpressionBuilder.less

abstract class KnownVulnerabilityUiTable(rowDetailsColumn: Column<Long>) : UiTable(rowDetailsColumn = rowDetailsColumn) {

    override val defaultSort: List<Pair<Column<*>, SortOrder>> = listOf(KnownVulnerabilitiesTable.averageCvssV3Score to SortOrder.DESC_NULLS_LAST, KnownVulnerabilitiesTable.epssScore to SortOrder.DESC_NULLS_LAST)

    fun addIdentifierColumn(columns: MutableList<UiColumn>) {
        columns.add(UiColumn("Identifier", icon = KnownVulnerability.Icon, tableColumn = KnownVulnerabilitiesTable.primaryIdentifier) { flowContent, row, request, _ ->
            flowContent.a(href = UrlGen.url(KnownVulnerabilityUiController::getKnownVulnerability, row[KnownVulnerabilitiesTable.id], request)) { +row[KnownVulnerabilitiesTable.primaryIdentifier] }
        })
    }

    fun addAverageCvssColumn(columns: MutableList<UiColumn>) {
        columns.add(UiColumn("CVSS", icon = CvssScore.Icon, tableColumn = KnownVulnerabilitiesTable.bestCvssV3Score) { flowContent, row, _, _ ->
            val score = row[KnownVulnerabilitiesTable.bestCvssV3Score]
            if (score != null) {
                val severity = CvssVersion.V3.scoreToSeverity(score)
                flowContent.span {
                    unsafe { severity.icon }
                    text(" ${severity.label} (${score})")
                }
            }
        })
    }

    fun addEpssColumn(columns: MutableList<UiColumn>) {
        columns.add(UiColumn("EPSS", icon = CvssScore.Icon, tableColumn = KnownVulnerabilitiesTable.epssScore) { flowContent, row, _, _ ->
            val epss = row[KnownVulnerabilitiesTable.epssScore]
            if (epss != null) {
                flowContent.text("${epss * 100.0}%")
            }
        })
    }

    override fun addSearchInput(flowContent: FlowContent, parameters: RequestParameters, tableContainerId: String, searchQuery: String?, placeholder: String) {
        flowContent.div("row") {
            div("col-lg-8") {
                super.addSearchInput(flowContent, parameters, tableContainerId, searchQuery, "Search Known Vulnerabilities")
            }
            div("col-lg-4") {
                select("form-select") {
                    name = SeverityParameter
                    option {
                        value = ""
                        +"Select CVSS Severity"
                    }
                    val severityId = parameters.getInt(SeverityParameter)
                    for (severity in CvssSeverity.enumValues) {
                        option {
                            value = severity.id.toString()
                            selected = severity.id == severityId
                            attributes["autocomplate"] = "off"
                            +severity.label
                        }
                    }
                }
            }
        }
    }

    protected fun addVulnerabilityFilters(query: Op<Boolean>, parameters: RequestParameters): Op<Boolean> {
        var query: Op<Boolean> = query

        val severity = CvssSeverity.mapOptional(parameters.getInt(SeverityParameter))
        if (severity != null) {
            if (severity.minV3ScoreInclusive != null) {
                query = query and (KnownVulnerabilitiesTable.bestCvssV3Score greaterEq severity.minV3ScoreInclusive)
            }

            if (severity.maxV3ScoreExclusive != null) {
                query = query and (KnownVulnerabilitiesTable.bestCvssV3Score less severity.maxV3ScoreExclusive)
            }
        }

        return query
    }

    companion object {
        const val SeverityParameter = "severity"
    }
}