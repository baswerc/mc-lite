package com.materialcentral.vulnerability

import org.geezer.db.FilteredUpdateStatement
import org.geezer.db.schema.DataTable
import org.jetbrains.exposed.sql.ReferenceOption
import org.jetbrains.exposed.sql.ResultRow

object KnownVulnerabilityUrlsTable : DataTable<KnownVulnerabilityUrl>("known_vulnerability_urls") {
    val vulnerabilityId = long("vulnerability_id").references(KnownVulnerabilitiesTable.id, onDelete = ReferenceOption.CASCADE).index("vulnerability_urls_vulnerability_ix")

    val url = url("url")

    init {
        uniqueIndex("vulnerability_urls_uq", vulnerabilityId, url)
    }

    override fun mapDataToStatement(data: KnownVulnerabilityUrl, statement: FilteredUpdateStatement, insert: Boolean) {
        if (insert) {
            statement[vulnerabilityId] = data.vulnerabilityId
            statement[url] = data.url
        }
    }

    override fun constructData(row: ResultRow): KnownVulnerabilityUrl {
        return KnownVulnerabilityUrl(row[vulnerabilityId], row[url]).apply { linkToDB(row[KnownVulnerabilityUrlsTable.id]) }
    }
}