package com.materialcentral.vulnerability

import org.geezer.HasNameDescription
import org.geezer.db.Data
import org.geezer.io.ui.FontIcon
import org.geezer.io.ui.HasIcon
import org.geezer.io.ui.Linkable
import com.materialcentral.vulnerability.db.KnownVulnerabilityDB
import com.materialcentral.vulnerability.ui.KnownVulnerabilityUiController
import kotlin.reflect.KFunction

class KnownVulnerability(
    var primaryIdentifier: String,
    var title: String?,
    override var description: String?,
    var primaryUrl: String?,
    var publishedAt: Long?,
    var lastModifiedAt: Long?,
    var ossPackageId: Long?,
    var affectedOssPackageVersions: String?,
    var fixedOssPackageVersions: String?,
    var dbs: List<KnownVulnerabilityDB>,
    var preferredCvssV3ScoreId: Long?,
    var averageCvssV3Score: Double?,
    // Best is preferred if available else average
    var bestCvssV3Score: Double?,
    var epssScore: Double?,
    var epssPercentile: Double?,
    var inKEV: Boolean?,
    var lastSynchronizedAt: Long?
) : Data(), Linkable, HasIcon, HasNameDescription {

    override val propertiesNotLogged = listOf(::description)

    override val route: KFunction<*> = KnownVulnerabilityUiController::get

    override val name: String
        get() = primaryIdentifier

    override val icon: FontIcon = Icon

    constructor(primaryIdentifier: String = "") : this(primaryIdentifier, null, null, null, null, null, null, null,
        null, listOf(), null, null, null, null, null, null, null)

    fun addDb(db: KnownVulnerabilityDB) {
        if (!dbs.contains(db)) {
            dbs = (dbs + db).sortedBy { it.rank }
        }
    }

    fun removeDb(db: KnownVulnerabilityDB) {
        if (dbs.contains(db)) {
            dbs = dbs - db
        }
    }

    companion object {
        @JvmField
        val Icon = FontIcon("fa-lock-keyhole-open", "f3c2")
    }
}