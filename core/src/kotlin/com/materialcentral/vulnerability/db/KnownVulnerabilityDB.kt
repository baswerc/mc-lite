package com.materialcentral.vulnerability.db

import org.geezer.db.ReadableDataEnum
import org.geezer.db.ReadableDataEnumType
import org.geezer.system.runtime.DataEnumListProperty

enum class KnownVulnerabilityDB(override val id: Int, override val readableId: String, override val label: String) : ReadableDataEnum{
    NVD(0, "nvd", "NVD"),
    ;

    val topRank: Boolean
        get() = rank == 0

    val rank: Int
        get() = PreferredRanking().indexOf(this).let { if (it == -1) enumValues.size else it }


    companion object : ReadableDataEnumType<KnownVulnerabilityDB> {
        val PreferredRanking = DataEnumListProperty("KnownVulnerabilityDbPreferredOrder", KnownVulnerabilityDB) { listOf(NVD) }

        override val enumValues: Array<KnownVulnerabilityDB> = enumValues()
    }
}

fun List<KnownVulnerabilityDB>.isTop(db: KnownVulnerabilityDB): Boolean {
    return contains(db) && db.rank >= maxOf { it.rank }
}