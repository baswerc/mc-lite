package com.materialcentral.vulnerability.db.nvd

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import org.geezer.system.runtime.OptionalStringProperty
import org.geezer.system.runtime.StringProperty
import org.geezer.causeMessage
import org.geezer.toJsonObjectOrBust
import okhttp3.OkHttpClient
import okhttp3.Request

object NvdClient {
    private val client: OkHttpClient = OkHttpClient.Builder().build()

    val NvdRootApiUrlProperty = StringProperty("NvdRootApiUrl", "https://services.nvd.nist.gov/rest/json/cves/2.0")

    val NvdApiKeyProperty = OptionalStringProperty("NvdApiKey")

    /**
     * Details on NVD rate limiting - https://nvd.nist.gov/developers/start-here
     */
    fun getCve(cveIdentifier: String, retryOnRateLimit: Boolean = true, sleepSecondsOnRetry: Int = 30): Either<String, NvdCve?> {
        val url = "${NvdRootApiUrlProperty()}?cveId=$cveIdentifier"
        val builder = Request.Builder().url(url)
        val apiKey = NvdApiKeyProperty()
        if (!apiKey.isNullOrBlank()) {
            builder.header("apiKey", apiKey)
        }

       return  try {
            client.newCall(builder.build()).execute().use { response ->
                when (response.code) {
                    200 -> {
                        val body = response.body?.string()
                        if (body == null) {
                            "NVD request: $url returned 200 but no body.".left()
                        } else {
                            val json = try {
                                body.toJsonObjectOrBust()
                            } catch (e: Exception) {
                                return@use "NVD request: $url could not parse JSON: $body due to: ${e.causeMessage}".left()

                            }

                            when (val result = NvdVulnerabilityResponse.map(json)) {
                                is Either.Left -> {
                                    "Unable to map NVD request: $url JSON: $body due to: ${result.value}".left()
                                }

                                is Either.Right -> {
                                    if (result.value.cves.size == 1) {
                                        result.value.cves[0].right()
                                    } else if (result.value.cves.isEmpty()) {
                                        null.right()
                                    } else {
                                        "NVD CVE request: $url returned unexpected: ${result.value.cves.size} CVEs.".left()
                                    }
                                }
                            }
                        }
                    }

                    404 -> {
                        null.right()
                    }

                    403 -> {
                        if (retryOnRateLimit) {
                            Thread.sleep(sleepSecondsOnRetry * 1000L)
                            getCve(cveIdentifier, false)
                        } else {
                            "Rate limit exceeded.".left()
                        }
                    }

                    else -> {
                        "NVD request $url returned status ${response.code}.".left()
                    }
                }
            }
        } catch (e: Exception) {
            "NVD request $url resulted in exception: ${e.causeMessage}".left()
        }
    }
}
