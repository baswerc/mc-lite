package com.materialcentral.vulnerability.db.nvd

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import com.beust.klaxon.JsonObject
import org.geezer.flexDouble
import com.materialcentral.vulnerability.CNA
import com.materialcentral.vulnerability.cvss.CvssSeverity
import com.materialcentral.vulnerability.cvss.CvssVersion

class NvdCvssScore(
    val version: CvssVersion,
    val source: String,
    val vector: String,
    val baseScore: Double
) {

    val severity: CvssSeverity
        get() = version.scoreToSeverity(baseScore)

    companion object {
        fun map(version: CvssVersion, json: JsonObject): Either<String, NvdCvssScore> {
            var source = json.string("source")
            if (source.isNullOrBlank()) {
                source = CNA.NVD.cnaName
            }

            // NVD API uses contact email for CNA identifier.
            val cna = CNA.entries.firstOrNull { it.contactEmail.equals(source, true) }
            if (cna != null) {
                source = cna.cnaName
            }

            val data = json.obj("cvssData") ?: return "Missing cvssData property.".left()

            val vector = data.string("vectorString") ?: return "Missing vectorString property.".left()

            val baseScore = data.flexDouble("baseScore") ?: return "Missing baseScore property.".left()

            return NvdCvssScore(version, source, vector, baseScore).right()
        }
    }
}
