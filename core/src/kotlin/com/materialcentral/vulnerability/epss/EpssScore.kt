package com.materialcentral.vulnerability.epss

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import com.beust.klaxon.JsonObject
import org.geezer.flexDouble
import java.text.SimpleDateFormat
import java.util.*

class EpssScore(
    val cve: String,
    val score: Double,
    val percentile: Double,
    val date: Long
) {
    companion object {
        const val DateFormat = "yyyy-MM-dd"

        fun parseDate(date: String?): Long? {
            return if (date.isNullOrBlank()) {
                null
            } else {
                try {
                    SimpleDateFormat(DateFormat).apply { timeZone = TimeZone.getTimeZone("UTC") }.parse(date).time
                } catch (e: Exception) {
                    null
                }
            }
        }

        fun map(json: JsonObject): Either<String, EpssScore> {
            val cve = json.string("cve") ?: return "Missing cve property.".left()
            val score = json.flexDouble("epss") ?: return "Missing valid epss property.".left()
            val percentile = json.flexDouble("percentile") ?: return "Missing valid percentile property.".left()
            val date = parseDate(json.string("date")) ?: return "Missing valid date property.".left()

            return EpssScore(cve, score, percentile, date).right()
        }
    }
}
