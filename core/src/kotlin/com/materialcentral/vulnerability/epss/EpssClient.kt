package com.materialcentral.vulnerability.epss

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import org.geezer.causeMessage
import org.geezer.toJsonObjectOrBust
import okhttp3.OkHttpClient
import okhttp3.Request
import org.slf4j.Logger
import org.slf4j.LoggerFactory

object EpssClient {
    private val log: Logger = LoggerFactory.getLogger(javaClass)

    private val client: OkHttpClient = OkHttpClient.Builder().build()

    const val EpssApiRootUrl = "https://api.first.org/data/v1/epss?cve="


    operator fun get(cve: String): Either<String, EpssScore?> {
        val cve = cve.uppercase()
        val url = "${EpssApiRootUrl}$cve"
        val request = Request.Builder().url(url).build()
        return try {
            client.newCall(request).execute().use { response ->
                if (response.code == 200) {
                    val body = response.body?.string()
                    if (body.isNullOrBlank()) {
                        return@use "EPSS request to $url returned 200 but not data was returned.".left()
                    }

                    val json = try {
                        body.toJsonObjectOrBust()
                    } catch (e: Exception) {
                        return@use "Unable to parse EPSS response to: $url with JSON: $body due to: ${e.causeMessage}".left()
                    }

                    when (val result = EpssResult.map(json)) {
                        is Either.Left -> {
                            "Unable to map EPSS response to $url with JSON: $body due to: ${result.value}".left()
                        }

                        is Either.Right -> {
                            val epssResult = result.value
                            if (epssResult.scores.size == 1) {
                                epssResult.scores[0].right()
                            } else if (epssResult.scores.size > 1) {
                                "EPSS request to: $url resulted in ${epssResult.scores.size} scores. Was expecting only 1 from this.".left()
                            } else {
                                null.right()

                            }
                        }
                    }
                } else {
                    "EPSS request to $url returned status ${response.code}".left()
                }
            }

        } catch (e: Exception) {
            "Request to $url result in exception: ${e.cause}".left()
        }
    }

    operator fun get(cves: List<String>): List<EpssScore> {
        val scores = mutableListOf<EpssScore>()
        for (cve in cves) {
            when (val result = get(cve)) {
                is Either.Left -> {
                    log.warn(result.value)
                }
                is Either.Right -> {
                    val epssResult = result.value
                    if (epssResult != null) {
                        scores.add(epssResult)
                    }
                }
            }
        }

        return scores
    }
}
