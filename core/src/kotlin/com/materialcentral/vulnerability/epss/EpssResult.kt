package com.materialcentral.vulnerability.epss

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import com.beust.klaxon.JsonObject
import org.geezer.flexInt
import org.slf4j.LoggerFactory

class EpssResult(val status: String, val statusCode: Int, val version: String, val access: String, val total: Int, val offset: Int, val limit: Int, val scores: List<EpssScore>) {
    companion object {
        fun map(json: JsonObject): Either<String, EpssResult> {
            val status = json.string("status") ?: return "Missing property status.".left()
            val statusCode = json.flexInt("status-code") ?: return "Missing property status-code.".left()
            val version = json.string("version") ?: return "Missing property version.".left()
            val access = json.string("access") ?: return "Missing property access.".left()
            val total = json.flexInt("total") ?: return "Missing property total.".left()
            val offset = json.flexInt("offset") ?: return "Missing property offset.".left()
            val limit = json.flexInt("limit") ?: return "Missing property limit.".left()

            val data = json.array<JsonObject>("data")
            val scores = mutableListOf<EpssScore>()
            if (data != null) {
                for (datum in data) {
                    when (val result = EpssScore.map(datum)) {
                        is Either.Left -> {
                            LoggerFactory.getLogger(javaClass).warn("Invalid EPSS score JSON: ${datum.toJsonString()} with error: ${result.value}")
                        }
                        is Either.Right -> {
                            scores.add(result.value)
                        }
                    }
                }
            }

            return EpssResult(status, statusCode, version, access, total, offset, limit, scores).right()
        }
    }
}
