package com.materialcentral.vulnerability

import org.geezer.db.DataEnum
import org.geezer.db.DataEnumType

fun String.toKnownVulnerabilityIdentifierType(): KnownVulnerabilityIdentifierType? {
    val str = lowercase().trim()
    for (value in KnownVulnerabilityIdentifierType.values()) {
        if (str.startsWith(value.identifierPrefix)) {
            return value
        }
    }

    return null
}

val String.isCve: Boolean
    get() = this.startsWith(KnownVulnerabilityIdentifierType.CVE.identifierPrefix, true)

enum class KnownVulnerabilityIdentifierType(override val id: Int, override val label: String, val identifierPrefix: String): DataEnum {
    CVE(0, "CVE", "cve-"),
    GHSA(1, "GHSA", "ghsa"),
    RHSA(2, "RHSA", "rhsa-"),
    OSVD(3, "OSVDB", "osvdb-");



    companion object : DataEnumType<KnownVulnerabilityIdentifierType> {
        override val enumValues: Array<KnownVulnerabilityIdentifierType> = values()

        override val defaultValue: KnownVulnerabilityIdentifierType = CVE
    }
}