package com.materialcentral.vulnerability.cvss

import org.geezer.db.DataEnum
import org.geezer.db.DataEnumType
import org.geezer.io.ui.FontIcon
import com.materialcentral.scan.FindingSeverity

enum class CvssSeverity(
    override val id: Int,
    override val label: String,
    val icon: FontIcon,
    val color: String,
    val backgroundColor: String,
    val minV3ScoreInclusive: Double?,
    val maxV3ScoreExclusive: Double?,
    val findingSeverity: FindingSeverity
) : DataEnum {

    NONE(0, "None", FontIcon("fa-circle-info", "f05a"), "#456990", "#33333", 0.0, 0.1, FindingSeverity.UNKNOWN),
    LOW(1, "Low", FontIcon("fa-circle-exclamation", "f06a"), "#595775", "#ededed", 0.1, 4.0, FindingSeverity.LOW),
    MEDIUM(2, "Medium", FontIcon("fa-square-exclamation", "f321"), "#d68100", "#ffe7cc", 4.0, 7.0, FindingSeverity.MEDIUM),
    HIGH(3, "High", FontIcon("fa-triangle-exclamation", "f071"), "#9d3e15", "#ffdbcc",7.0, 9.0, FindingSeverity.HIGH),
    CRITICAL(4, "Critical", FontIcon("fa-diamond-exclamation", "e405"), "#ad1a1a", "#ffd8d6", 9.0, 10.0, FindingSeverity.CRITICAL);

    fun toBadge(text: Any): String = """<span class="badge" style="background: $color !important; color: white !important; font-weight: bold;">${icon} $text</span>"""

    companion object : DataEnumType<CvssSeverity> {
        override val enumValues: Array<CvssSeverity> = values()

        override val defaultValue: CvssSeverity = NONE
    }
}